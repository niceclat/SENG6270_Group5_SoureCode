///////////////////////////////////////////////////////////
//  MainProgram.cs
//  Implementation of the Class MainProgram
//  Generated by Enterprise Architect
//  Created on:      12-Feb-2018 9:03:26 AM
//  Original author: paulus_d
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



public class MainProgram {

    public List<Order> orders;
    public const string PROMOCODE_1 = "N56M2"; 
    public double TotalPrice { get; set; }

    //Create a new lis to hold all the orders
	public MainProgram(){
        orders = new List<Order>();
	}

    //Create and add a new order to the list
	public void AddNewOrder(int OrderID){
        int qtyLeft = GetUsedQuantity();
        orders.Add(new Order(OrderID, qtyLeft));
	}

    public int GetUsedQuantity()
    {
        int qty = 0;
        foreach (Order o in orders)
        {
            qty += Convert.ToInt32(o.QuantityOptions.SelectedItem);
        }
        return qty;
    }

    //If the user applied a discount or qualifies for one adjust the total accordingly
	public void UpdateTotalAndDiscount(string Code){
        CalculateAllTotal();
        double PromoPrice = 0;
        double DiscountPrice = 0;

        //If the promo code is applied and it is an order 1 with qty = 100 subtract 2 dollars
        if (Code == PROMOCODE_1 && orders.Count == 1 && Convert.ToInt32(orders[0].QuantityOptions.SelectedItem) == 100)
        {
            PromoPrice = TotalPrice - 2;
        }
        //If hte promo code does not apply but the total is > 35 reduce the price by 5%
        if (TotalPrice > 35)
        {
            DiscountPrice = TotalPrice * .95;
        }
        if (PromoPrice != 0 && DiscountPrice != 0)
        {
            if (PromoPrice < DiscountPrice)
            {
                TotalPrice = PromoPrice;
            }
            else if (DiscountPrice < PromoPrice)
            {
                TotalPrice = DiscountPrice;
            }
        }
        else if (DiscountPrice== 0 && PromoPrice!= 0)
        {
            TotalPrice = PromoPrice;
        }
        else if (DiscountPrice != 0 && PromoPrice == 0)
        {
            TotalPrice = DiscountPrice;
        }
    }

    //Return the total for all orders
	private double CalculateAllTotal(){
        TotalPrice = 0.0;

        if (orders.Count > 1)
        {
            foreach (Order o in orders)
            {
                o.CalculateOrder2();
            }
        }
        else
        {
             orders[0].CalculateOrder1();
        }

        foreach (Order o in orders)
        {
            TotalPrice += o.OrderTotal;
        }

        return TotalPrice;
	}

}//end MainProgram